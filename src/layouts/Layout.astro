---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Portfolio de Matías Fabio, desarrollador full stack especializado en React, Node.js y tecnologías web modernas." } = Astro.props;

import '../styles/global.css';
---

<!DOCTYPE html>
<html lang="es" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
    
    <script is:inline>
      // Theme initialization - debe ejecutarse antes de que se renderice el contenido
      function initTheme() {
        const getThemePreference = () => {
          if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
            return localStorage.getItem('theme');
          }
          return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        };
        
        const theme = getThemePreference();
        document.documentElement.classList.toggle('dark', theme === 'dark');
        
        // Guardar cambios automáticamente
        if (typeof localStorage !== 'undefined') {
          localStorage.setItem('theme', theme);
        }
      }
      
      initTheme();
    </script>
  </head>
  <body class="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 font-sans antialiased">
    <slot />
    
    <script>
      // Observer para guardar cambios de tema
      if (typeof localStorage !== 'undefined') {
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains('dark');
          localStorage.setItem('theme', isDark ? 'dark' : 'light');
        });
        observer.observe(document.documentElement, { 
          attributes: true, 
          attributeFilter: ['class'] 
        });
      }
    </script>
  </body>
</html>